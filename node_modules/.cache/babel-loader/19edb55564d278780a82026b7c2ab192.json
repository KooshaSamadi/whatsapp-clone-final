{"ast":null,"code":"import{v4 as uuid}from\"uuid\";export default function recordAudio(){return new Promise(function(resolve){navigator.mediaDevices.getUserMedia({audio:true}).then(function(stream){var mediaRecorder=new MediaRecorder(stream);var audioChunks=[];mediaRecorder.addEventListener(\"dataavailable\",function(event){audioChunks.push(event.data);});function start(){mediaRecorder.start();}function stop(){return new Promise(function(resolve){mediaRecorder.addEventListener(\"stop\",function(){var audioName=uuid();var audioFile=new File(audioChunks,audioName,{type:\"audio/mpeg\"});var audioUrl=URL.createObjectURL(audioFile);var audio=new Audio(audioUrl);function play(){audio.play();}resolve({audioFile:audioFile,audioUrl:audioUrl,play:play,audioName:audioName});});mediaRecorder.stop();});}resolve({start:start,stop:stop});});});}","map":{"version":3,"sources":["C:/Users/Koosha/Desktop/Reed Barger - Build WhatsApp with React 2021-5/whatsapp-clone/src/components/recordAudio.js"],"names":["v4","uuid","recordAudio","Promise","resolve","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","audioChunks","addEventListener","event","push","data","start","stop","audioName","audioFile","File","type","audioUrl","URL","createObjectURL","Audio","play"],"mappings":"AAAA,OAASA,EAAE,GAAIC,CAAAA,IAAf,KAA2B,MAA3B,CAEA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CACpC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CAC9BC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC,CAAEC,KAAK,CAAE,IAAT,CAApC,EAAqDC,IAArD,CAA0D,SAACC,MAAD,CAAY,CACpE,GAAMC,CAAAA,aAAa,CAAG,GAAIC,CAAAA,aAAJ,CAAkBF,MAAlB,CAAtB,CACA,GAAMG,CAAAA,WAAW,CAAG,EAApB,CAEAF,aAAa,CAACG,gBAAd,CAA+B,eAA/B,CAAgD,SAACC,KAAD,CAAW,CACzDF,WAAW,CAACG,IAAZ,CAAiBD,KAAK,CAACE,IAAvB,EACD,CAFD,EAIA,QAASC,CAAAA,KAAT,EAAiB,CACfP,aAAa,CAACO,KAAd,GACD,CAED,QAASC,CAAAA,IAAT,EAAgB,CACd,MAAO,IAAIhB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CAC9BO,aAAa,CAACG,gBAAd,CAA+B,MAA/B,CAAuC,UAAM,CAC3C,GAAMM,CAAAA,SAAS,CAAGnB,IAAI,EAAtB,CACA,GAAMoB,CAAAA,SAAS,CAAG,GAAIC,CAAAA,IAAJ,CAAST,WAAT,CAAsBO,SAAtB,CAAiC,CACjDG,IAAI,CAAE,YAD2C,CAAjC,CAAlB,CAGA,GAAMC,CAAAA,QAAQ,CAAGC,GAAG,CAACC,eAAJ,CAAoBL,SAApB,CAAjB,CACA,GAAMb,CAAAA,KAAK,CAAG,GAAImB,CAAAA,KAAJ,CAAUH,QAAV,CAAd,CACA,QAASI,CAAAA,IAAT,EAAgB,CACdpB,KAAK,CAACoB,IAAN,GACD,CAEDxB,OAAO,CAAC,CAAEiB,SAAS,CAATA,SAAF,CAAaG,QAAQ,CAARA,QAAb,CAAuBI,IAAI,CAAJA,IAAvB,CAA6BR,SAAS,CAATA,SAA7B,CAAD,CAAP,CACD,CAZD,EAcAT,aAAa,CAACQ,IAAd,GACD,CAhBM,CAAP,CAiBD,CAEDf,OAAO,CAAC,CAAEc,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAD,CAAP,CACD,CAjCD,EAkCD,CAnCM,CAAP,CAoCD","sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nexport default function recordAudio() {\n  return new Promise((resolve) => {\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const mediaRecorder = new MediaRecorder(stream);\n      const audioChunks = [];\n\n      mediaRecorder.addEventListener(\"dataavailable\", (event) => {\n        audioChunks.push(event.data);\n      });\n\n      function start() {\n        mediaRecorder.start();\n      }\n\n      function stop() {\n        return new Promise((resolve) => {\n          mediaRecorder.addEventListener(\"stop\", () => {\n            const audioName = uuid();\n            const audioFile = new File(audioChunks, audioName, {\n              type: \"audio/mpeg\",\n            });\n            const audioUrl = URL.createObjectURL(audioFile);\n            const audio = new Audio(audioUrl);\n            function play() {\n              audio.play();\n            }\n\n            resolve({ audioFile, audioUrl, play, audioName });\n          });\n\n          mediaRecorder.stop();\n        });\n      }\n\n      resolve({ start, stop });\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}