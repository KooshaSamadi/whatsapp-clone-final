{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Koosha\\\\Desktop\\\\Reed Barger - Build WhatsApp with React 2021-5\\\\whatsapp-clone\\\\src\\\\components\\\\AudioPlayer.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress } from \"@material-ui/core\";\nimport { PauseRounded, PlayArrowRounded } from \"@material-ui/icons\";\nimport React from \"react\";\nimport \"./AudioPlayer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AudioPlayer({\n  sender,\n  audioUrl,\n  id,\n  setAudioId,\n  audioId\n}) {\n  _s();\n\n  const [isPlaying, setPlaying] = React.useState(false);\n  const [isMediaLoaded, setMediaLoaded] = React.useState(false);\n  const [isLoaded, setLoaded] = React.useState(false);\n  const [isMetadataLoaded, setMetadataLoaded] = React.useState(false);\n  const [sliderValue, setSliderValue] = React.useState(0);\n  const [duration, setDuration] = React.useState(\"\");\n  const totalDuration = React.useRef(\"\");\n  const audio = React.useRef(new Audio(audioUrl));\n  const interval = React.useRef();\n  const isUploading = React.useRef(audioUrl === \"uploading\");\n  React.useEffect(() => {\n    if (isUploading.current && audioUrl !== \"uploading\") {\n      audio.current = new Audio(audioUrl);\n      audio.current.load();\n      setLoaded(true);\n    } else if (isUploading.current === false) {\n      setLoaded(true);\n    }\n  }, [audioUrl]);\n\n  function getAudioDuration(media) {\n    return new Promise(resolve => {\n      media.onloadedmetadata = () => {\n        media.currentTime = Number.MAX_SAFE_INTEGER;\n\n        media.ontimeupdate = () => {\n          media.ontimeupdate = () => {};\n\n          media.currentTime = 0.1;\n          resolve(media.duration);\n        };\n      };\n    });\n  }\n\n  React.useEffect(() => {\n    if (isLoaded) {\n      getAudioDuration(audio.current).then(() => {\n        setMetadataLoaded(true);\n      });\n    }\n  }, [isLoaded]);\n  React.useEffect(() => {\n    if (isMetadataLoaded) {\n      audio.current.addEventListener(\"canplaythrough\", () => {\n        if (!totalDuration.current) {\n          setMediaLoaded(true);\n          const time = formatTime(audio.current.duration);\n          totalDuration.current = time;\n          setDuration(totalDuration.current);\n        }\n      });\n      audio.current.addEventListener(\"ended\", () => {\n        clearInterval(interval.current);\n        setDuration(totalDuration.current);\n        setSliderValue(0);\n        setPlaying(false);\n      });\n    }\n  }, [isMetadataLoaded]);\n\n  function formatTime(time) {\n    let minutes = Math.floor(time / 60);\n    let seconds = Math.floor(time - minutes * 60);\n\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    return `${minutes}:${seconds}`;\n  }\n\n  function playAudio() {\n    setPlaying(true);\n    audio.current.play();\n\n    if (audioId !== id) {\n      setAudioId(id);\n    }\n\n    interval.current = setInterval(updateSlider, 100);\n  }\n\n  function updateSlider() {\n    let sliderPosition = 0;\n    const {\n      currentTime,\n      duration\n    } = audio.current;\n\n    if (typeof duration === \"number\") {\n      sliderPosition = currentTime * (100 / duration);\n      setSliderValue(sliderPosition);\n      const time = formatTime(currentTime);\n      setDuration(time);\n    }\n  }\n\n  function stopAudio() {\n    audio.current.pause();\n    clearInterval(interval.current);\n    setPlaying(false);\n    setDuration(totalDuration.current);\n  }\n\n  function scrubAudio(event) {\n    const value = event.target.value;\n    const {\n      duration\n    } = audio.current;\n\n    if (isMediaLoaded) {\n      const seekTo = duration * (value / 100);\n      audio.current.currentTime = seekTo;\n      setSliderValue(value);\n    }\n  }\n\n  React.useEffect(() => {\n    if (audioId !== id) {\n      audio.current.pause();\n      setPlaying(false);\n    }\n  }, [audioId, id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `audioplayer ${sender ? \"\" : \"audioplayer__alt\"}`,\n      children: [!isMediaLoaded ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this) : isPlaying ? /*#__PURE__*/_jsxDEV(PauseRounded, {\n        onClick: stopAudio,\n        className: \"pause\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this) : !isPlaying ? /*#__PURE__*/_jsxDEV(PlayArrowRounded, {\n        onClick: playAudio\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            width: `${sliderValue}%`\n          },\n          className: \"audioplayer__slider--played\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"100\",\n          value: sliderValue,\n          onChange: scrubAudio,\n          className: \"audioplayer__slider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"chat__timestamp audioplayer__time\",\n      children: duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(AudioPlayer, \"jOvZHlWGnKNBLUH0FgFXCXsxNsE=\");\n\n_c = AudioPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"sources":["C:/Users/Koosha/Desktop/Reed Barger - Build WhatsApp with React 2021-5/whatsapp-clone/src/components/AudioPlayer.js"],"names":["CircularProgress","PauseRounded","PlayArrowRounded","React","AudioPlayer","sender","audioUrl","id","setAudioId","audioId","isPlaying","setPlaying","useState","isMediaLoaded","setMediaLoaded","isLoaded","setLoaded","isMetadataLoaded","setMetadataLoaded","sliderValue","setSliderValue","duration","setDuration","totalDuration","useRef","audio","Audio","interval","isUploading","useEffect","current","load","getAudioDuration","media","Promise","resolve","onloadedmetadata","currentTime","Number","MAX_SAFE_INTEGER","ontimeupdate","then","addEventListener","time","formatTime","clearInterval","minutes","Math","floor","seconds","playAudio","play","setInterval","updateSlider","sliderPosition","stopAudio","pause","scrubAudio","event","value","target","seekTo","width"],"mappings":"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","sourcesContent":["import { CircularProgress } from \"@material-ui/core\";\nimport { PauseRounded, PlayArrowRounded } from \"@material-ui/icons\";\nimport React from \"react\";\nimport \"./AudioPlayer.css\";\n\nexport default function AudioPlayer({\n  sender,\n  audioUrl,\n  id,\n  setAudioId,\n  audioId,\n}) {\n  const [isPlaying, setPlaying] = React.useState(false);\n  const [isMediaLoaded, setMediaLoaded] = React.useState(false);\n  const [isLoaded, setLoaded] = React.useState(false);\n  const [isMetadataLoaded, setMetadataLoaded] = React.useState(false);\n  const [sliderValue, setSliderValue] = React.useState(0);\n  const [duration, setDuration] = React.useState(\"\");\n\n  const totalDuration = React.useRef(\"\");\n  const audio = React.useRef(new Audio(audioUrl));\n  const interval = React.useRef();\n  const isUploading = React.useRef(audioUrl === \"uploading\");\n\n  React.useEffect(() => {\n    if (isUploading.current && audioUrl !== \"uploading\") {\n      audio.current = new Audio(audioUrl);\n      audio.current.load();\n      setLoaded(true);\n    } else if (isUploading.current === false) {\n      setLoaded(true);\n    }\n  }, [audioUrl]);\n\n  function getAudioDuration(media) {\n    return new Promise((resolve) => {\n      media.onloadedmetadata = () => {\n        media.currentTime = Number.MAX_SAFE_INTEGER;\n\n        media.ontimeupdate = () => {\n          media.ontimeupdate = () => {};\n          media.currentTime = 0.1;\n          resolve(media.duration);\n        };\n      };\n    });\n  }\n\n  React.useEffect(() => {\n    if (isLoaded) {\n      getAudioDuration(audio.current).then(() => {\n        setMetadataLoaded(true);\n      });\n    }\n  }, [isLoaded]);\n\n  React.useEffect(() => {\n    if (isMetadataLoaded) {\n      audio.current.addEventListener(\"canplaythrough\", () => {\n        if (!totalDuration.current) {\n          setMediaLoaded(true);\n          const time = formatTime(audio.current.duration);\n          totalDuration.current = time;\n          setDuration(totalDuration.current);\n        }\n      });\n\n      audio.current.addEventListener(\"ended\", () => {\n        clearInterval(interval.current);\n        setDuration(totalDuration.current);\n        setSliderValue(0);\n        setPlaying(false);\n      });\n    }\n  }, [isMetadataLoaded]);\n\n  function formatTime(time) {\n    let minutes = Math.floor(time / 60);\n    let seconds = Math.floor(time - minutes * 60);\n\n    if (minutes < 10) {\n      minutes = `0${minutes}`;\n    }\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n\n    return `${minutes}:${seconds}`;\n  }\n\n  function playAudio() {\n    setPlaying(true);\n    audio.current.play();\n    if (audioId !== id) {\n      setAudioId(id);\n    }\n    interval.current = setInterval(updateSlider, 100);\n  }\n\n  function updateSlider() {\n    let sliderPosition = 0;\n\n    const { currentTime, duration } = audio.current;\n    if (typeof duration === \"number\") {\n      sliderPosition = currentTime * (100 / duration);\n      setSliderValue(sliderPosition);\n      const time = formatTime(currentTime);\n      setDuration(time);\n    }\n  }\n\n  function stopAudio() {\n    audio.current.pause();\n    clearInterval(interval.current);\n    setPlaying(false);\n    setDuration(totalDuration.current);\n  }\n\n  function scrubAudio(event) {\n    const value = event.target.value;\n    const { duration } = audio.current;\n\n    if (isMediaLoaded) {\n      const seekTo = duration * (value / 100);\n      audio.current.currentTime = seekTo;\n      setSliderValue(value);\n    }\n  }\n\n  React.useEffect(() => {\n    if (audioId !== id) {\n      audio.current.pause();\n      setPlaying(false);\n    }\n  }, [audioId, id]);\n\n  return (\n    <>\n      <div className={`audioplayer ${sender ? \"\" : \"audioplayer__alt\"}`}>\n        {!isMediaLoaded ? (\n          <CircularProgress />\n        ) : isPlaying ? (\n          <PauseRounded onClick={stopAudio} className=\"pause\" />\n        ) : !isPlaying ? (\n          <PlayArrowRounded onClick={playAudio} />\n        ) : null}\n        <div>\n          <span\n            style={{ width: `${sliderValue}%` }}\n            className=\"audioplayer__slider--played\"\n          />\n          <input\n            type=\"range\"\n            min=\"1\"\n            max=\"100\"\n            value={sliderValue}\n            onChange={scrubAudio}\n            className=\"audioplayer__slider\"\n          />\n        </div>\n      </div>\n      <span className=\"chat__timestamp audioplayer__time\">{duration}</span>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}